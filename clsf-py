import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
from sklearn.preprocessing import StandardScaler

# Load and preprocess data
def load_data(file_path='data/processed/transactions.csv'):
    df = pd.read_csv(file_path)
    # Example: Label transactions as high-value (>1000) or low-value
    df['label'] = df['amount'].apply(lambda x: 1 if x > 1000 else 0)
    df['amount'] = df['amount'].apply(pd.to_numeric, errors='coerce')
    df.dropna(inplace=True)  # Remove rows with missing values
    return df

# Train a classification model to predict high/low-value transactions
def train_model(df):
    # Select features and target
    features = df[['amount']]
    target = df['label']

    # Split data into training and test sets
    X_train, X_test, y_train, y_test = train_test_split(features, target, test_size=0.2, random_state=42)

    # Standardize features
    scaler = StandardScaler()
    X_train = scaler.fit_transform(X_train)
    X_test = scaler.transform(X_test)

    # Train a RandomForest Classifier model
    model = RandomForestClassifier(n_estimators=100, random_state=42)
    model.fit(X_train, y_train)

    # Predict and evaluate
    y_pred = model.predict(X_test)
    print(classification_report(y_test, y_pred))

    return model

if __name__ == "__main__":
    df = load_data('data/processed/transactions.csv')
    model = train_model(df)
